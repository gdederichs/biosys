figure(1) (ex1c_2) initial cdt:

function par = param()
% Define parameters and their value
par.k1 = 0.9; %absorption rate of lext to l
par.k2 = 1; %formation of LacI
par.k3 = 3; %formation of LacY, LacA and LacZ
par.kd = 0.5; %degradation of l
par.kdI = 0.8; %degradation of LacI
par.kdY = 0.2; %degradation of LacY
par.kdAZ = 0.2; %degradation of LacA and LacZ
par.Kl = 0.03; %inhibition of LacI (smaller value -> bigger inhinition)
par.KI = 0.05; %inhibition of LacY, LacA and LacZ (smaller value -> bigger inhinition)
par.Vin = 0.0; %lext adding rate
end

% Function to define all initial conditions
function x0 = init_cond()
% Define initial conditions
lext0 = 0;
lin = 6;
LacI0 = 0.01;
LacY0 = 1;
LacAZ0 = 2*LacY0;


======================== PREVIOUS CODE WITH lext VARYING: =================================

clc
clear

%% Lactose input at lext = 0; arbitrary initial conditions
% Initial cdts and params
x0 = init_cond();
par = param();
% Timespan for simulation
tspan = [0 50]; 
options = [];

[t,x] = ode45(@diff_eq,tspan,x0,options,par);
lext = x(:, 1);
l = x(:, 2);
LacI = x(:, 3);
LacY = x(:, 4);
LacAZ = x(:, 5);

figure(1)
plot(t, lext, t, l, t, LacI, t, LacY, t, LacAZ)
legend('lext', 'l', 'LacI', 'LacY', 'LacA and LacZ')
xlabel('t')

%% Lactose input at lext = 1; initial cdts are steady state of previous



function dxdt = diff_eq(t,x,par)
% Variables 
lext = x(1);
l = x(2);
LacI = x(3);
LacY = x(4);
LacAZ = x(5);

% Differential equations
lext_dot = par.Vin - par.k1*lext*LacY;
l_dot = par.k1*lext*LacY - l*par.kd*LacAZ;
LacI_dot = par.k2/(1+(l/par.Kl))-par.kdI*LacI;
LacY_dot = par.k3/(1+(LacI/par.KI))-par.kdY*LacY;
LacAZ_dot = 2*par.k3/(1+(LacI/par.KI))-par.kdAZ*LacAZ;

dxdt = [lext_dot;l_dot;LacI_dot;LacY_dot;LacAZ_dot];
end


function par = param()
par.k1 = 0.9; %absorption rate of lext to l
par.k2 = 1; %formation of LacI
par.k3 = 3; %formation of LacY, LacA and LacZ
par.kd = 0.5; %degradation of l
par.kdI = 0.8; %degradation of LacI
par.kdY = 0.2; %degradation of LacY
par.kdAZ = 0.2; %degradation of LacA and LacZ
par.Kl = 0.03; %inhibition of LacI (smaller value -> bigger inhinition)
par.KI = 0.05; %inhibition of LacY, LacA and LacZ (smaller value -> bigger inhinition)
par.Vin = 0.0; %lext adding rate
end


function x0 = init_cond()
lext0 = 0;
lin = 6;
LacI0 = 0.01;
LacY0 = 1;
LacAZ0 = 2*LacY0;

x0 = [lext0; lin; LacI0; LacY0; LacAZ0];
end

% Function to plot the nullclines
% ATTENTION: You need to fill in line 13 and 14 before you can run the code

% function nl = plot_NullCline()
% % Define parameters
% par.k1 = 0.02;
% par.kp = 6;
% par.Km = 13;
% par.Vin = 0.36;
% 
% % Define ODEs
% syms G ATP
% G_dot = par.Vin - par.k1*G*ATP;
% ATP_dot = 2*par.k1*G*ATP - par.kp*ATP/(ATP + par.Km);
% 
% % Plot nullclines 
% figure()
% nl1=ezplot(G_dot,[0,12,0,12]);
% set(nl1,'color','r','linewidth',2);
% hold on;
% nl2=ezplot(ATP_dot,[0,12,0,12]);
% set(nl2,'color','b','linewidth',2);
% nl=[nl1,nl2];
% end

% function vectorField(par)
% Define area/values for which the vector field is created for
% [G, ATP] = meshgrid(0:0.5:12, 0:0.5:20);
% 
% Define ODEs
% ATP_dot = 2*par.k1*G*ATP - par.kp*ATP/(ATP + par.km);
% G_dot = par.vin - par.k1*G*ATP;
% 
% Plot vector field
% figure();
% quiver(G, ATP, G_dot, ATP_dot)
% xlim([0 12])
% ylim([0 20])
% end
